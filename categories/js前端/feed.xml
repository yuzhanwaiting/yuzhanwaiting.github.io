<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/categories/js%E5%89%8D%E7%AB%AF/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/categories/js%E5%89%8D%E7%AB%AF/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>lambda表达式的一些特例</title>
      <link>http://www.yuzhan.me/post/2014-01-20-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E4%BE%8B/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-20-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E4%BE%8B/</guid>
      <description>&lt;p&gt;在js中，函数无限极嵌套。python也可以如此。 最近，在学习python中发现一个很有意思的东西 先看一下的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def func1():
    res = []
    for i in range(5):
        res.append(lambda x: i ** x)
    return res

s1 = func1()
print(s1[0](4))
print(s1[2](4))
#输出 256,256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么都会输出256呢，&lt;br /&gt;
别急，我们先看下面的函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def func2():
    res = []
    for i in range(5):
        res.append(lambda x,i=i: i ** x)
    return res
s2 = func2()
print(s2[0](4))
print(s2[2](4))
#输出0,16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;观察两个函数，我们发觉只有lambda表达式中，函数的参数不一样。&lt;br /&gt;
通过查资料，我们了解到。&lt;br /&gt;
&lt;strong&gt;嵌套函数中的变量只有在调用的时候，才会进行查找&lt;/strong&gt;&lt;br /&gt;
于是，我们观察以上的程序,发现循环之后，i变量会保存为最终值（就是4），直到调用&lt;strong&gt;func1()&lt;/strong&gt;。&lt;br /&gt;
而第二个函数，&lt;strong&gt;func2()&lt;/strong&gt;中有默认值i，而默认值则是在函数创建时，就会进行查找，所以，会随表达式一起。&lt;/p&gt;

&lt;p&gt;下面给出js代码，供大家参考&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function func1()
{
    var arr = []
    for (var i=0; i &amp;amp;lt; 5; i++){
        arr.push(function(x){alert(i*x)})
    }
    return arr
}
var x = func1()
x[0](5)
x[1](5)


function func2()
{
    var arr = []
    for(var i = 0; i &amp;amp;lt; 5; i++){
        cache(i)
    }

    //由于js中没有python默认值这种模式，于是改用函数来改变存入数组的函数
    function cache(i)
    {
        arr.push(function(x){
            alert(i * x);
        })
    }
    return arr
}
var x2 = func2()
x2[0](5)
x2[1](5)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JS中的call()和apply()方法</title>
      <link>http://www.yuzhan.me/post/2014-01-06-js%E4%B8%AD%E7%9A%84call%E5%92%8Capply%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-06-js%E4%B8%AD%E7%9A%84call%E5%92%8Capply%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;h1 id=&#34;方法定义&#34;&gt;方法定义&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;call方法:&lt;/strong&gt;&lt;br /&gt;
语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])&lt;br /&gt;
定义：调用一个对象的一个方法，以另一个对象替换当前对象。&lt;br /&gt;
说明：&lt;br /&gt;
call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。&lt;br /&gt;
如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;apply方法：&lt;/strong&gt;&lt;br /&gt;
语法：apply([thisObj[,argArray]])&lt;br /&gt;
定义：应用某一对象的一个方法，用另一个对象替换当前对象。&lt;br /&gt;
说明：&lt;br /&gt;
如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。&lt;br /&gt;
如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、常用实例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a、&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function add(a,b)
{
    alert(a+b);
}

function sub(a,b)
{
    alert(a-b);
}

add.call(sub,3,1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子中的意思就是用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4); // 注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b、&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Animal(){
    this.name = &amp;quot;Animal&amp;quot;;
    this.showName = function(){
        alert(this.name);
    }
}

function Cat(){
    this.name = &amp;quot;Cat&amp;quot;;
}

var animal = new Animal();
var cat = new Cat();

//通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。
//输入结果为&amp;quot;Cat&amp;quot;
animal.showName.call(cat,&amp;quot;,&amp;quot;);
//animal.showName.apply(cat,[]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;call 的意思是把 animal 的方法放到cat上执行，原来cat是没有showName() 方法，现在是把animal 的showName()方法放到 cat上来执行，所以this.name 应该是 Cat&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c、实现继承&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Animal(name){
    this.name = name;
    this.showName = function(){
        alert(this.name);
    }
}

function Cat(name){
    Animal.call(this, name);
}

var cat = new Cat(&amp;quot;Black Cat&amp;quot;);
cat.showName();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Animal.call(this)&lt;/code&gt; 的意思就是使用 Animal对象代替this对象，那么 Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d、多重继承&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Class10(){
    this.showSub = function(a,b)
    {
        alert(a-b);
    }
}

function Class11(){
    this.showAdd = function(a,b)
    {
        alert(a+b);
    }
}

function Class2()
{
    Class10.call(this);
    Class11.call(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很简单，使用两个 call 就实现多重继承了&lt;br /&gt;
当然，js的继承还有其他方法，例如使用原型链，这个不属于本文的范畴，只是在此说明call 的用法。说了call ，当然还有 apply，这两个方法基本上是一个意思，区别在于 call 的第二个参数可以是任意类型，而apply的第二个参数必须是数组，也可以是arguments&lt;br /&gt;
还有 &lt;strong&gt;callee，caller..&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>js回调函数的写法</title>
      <link>http://www.yuzhan.me/post/2014-01-06-js%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-06-js%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%99%E6%B3%95/</guid>
      <description>&lt;p&gt;上次一个项目中用到了回调函数，对于js水平还停留在菜鸟水平的我，自然免不了研究一番。大概总结了两种写法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a.非参数回调函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这类回调函数大多比较简答，往往传一个函数名就可以。诸如此类的用法，有setInterval函数，大致的实现如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function demo(arg,callback){
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由此想到，demo函数可以通过，callback()来调用。&lt;/p&gt;

&lt;p&gt;但，等等，万一没传参数，或者传的不是函数对象该如何。于是，可以判断参数以及其类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function demo(one,callback)
{
	alert(one);
	if(callback &amp;amp;&amp;amp; callback instanceof Function) //判断是否传参，以及参数类型
		callback();
}

demo(&#39;a&#39;,function(){
	alert(&#39;b&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上就是第一种方法，是不是很简单&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b.带参数的回调函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这类函数，往往用的比较多。比如常用的jquery中,遍历数组或对象的函数each()。他接受一个对象或数组和一个回调函数，来完成对遍历结果的输出。&lt;/p&gt;

&lt;p&gt;如果我们用第一种方法，则无法完成传参。此时我们该如何做？&lt;/p&gt;

&lt;p&gt;首先，我们先写出该函数的大致雏形(为了方便说明，以下函数只针对数组，遍历对象，请大家自行实现)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function each(arr,callback){
       for(var i = 0,l = arr.length; i &amp;amp;lt; l ; i++ ){
       //..code
       }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码中，我们遍历了数组，但是并不能通过回调函数来使用。&lt;/p&gt;

&lt;p&gt;于是我们想到call函数（对call函数不太了解的可以参看我转载的另一篇文章，这里只做大概说明）&lt;/p&gt;

&lt;p&gt;上面的代码可以改写成如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function each(obj,callback){
	for(var i=0,l = obj.length;i&amp;amp;lt;l;i++){
		callback.call(obj,i,obj[i]); //此处的意思是，用callback来替换obj，所以实现为callback(i,obj[i]),正好将数组遍历;
	}
}
//为了证明函数的正确性，我们做如下测试

var json = [6,5,3,2,8,4];

each(json,function(i,n){
    alert(i+&amp;quot;----------&amp;quot;+n);
});
//输出的结果为0-----6等等
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>