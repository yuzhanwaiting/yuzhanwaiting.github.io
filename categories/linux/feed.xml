<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/categories/linux/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/categories/linux/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TLPI学习笔记--文件io(四)--文件描述符</title>
      <link>http://www.yuzhan.me/post/2015-09-19-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E5%9B%9B%29--%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</link>
      <pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-09-19-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E5%9B%9B%29--%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</guid>
      <description>

&lt;h1 id=&#34;1-文件描述符与打开文件&#34;&gt;1. 文件描述符与打开文件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;进程级的文件描述符表&lt;/li&gt;
&lt;li&gt;系统级打开文件表&lt;/li&gt;
&lt;li&gt;文件系统的i-node表&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;不同数据表-存储信息如下&#34;&gt;不同数据表,存储信息如下&lt;/h2&gt;

&lt;h3 id=&#34;1-进程级的文件描述符表-open-file-descriptor&#34;&gt;1. 进程级的文件描述符表(&lt;code&gt;open_ file descriptor&lt;/code&gt;)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;控制文件描述符操作的一组标志(目前只定义了一个,即&lt;code&gt;close-on-exec&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;对打开文件句柄的引用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-系统级的打开文件表-open-file-table-并且将表中各条目成为打开的文件句柄-open-file-handle&#34;&gt;2. 系统级的打开文件表(&lt;code&gt;open file table&lt;/code&gt;),并且将表中各条目成为打开的文件句柄(&lt;code&gt;open file handle&lt;/code&gt;)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;当前文件偏移量&lt;/li&gt;
&lt;li&gt;打开文件时所使用的状态标志&lt;/li&gt;
&lt;li&gt;文件访问模式&lt;/li&gt;
&lt;li&gt;与信号驱动&lt;code&gt;IO&lt;/code&gt;相关的设置&lt;/li&gt;
&lt;li&gt;对该文件&lt;code&gt;i-node&lt;/code&gt;对象的引用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-文件系统的-i-node-表&#34;&gt;3. 文件系统的&lt;code&gt;i-node&lt;/code&gt;表&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;文件类型&lt;/li&gt;
&lt;li&gt;指向该文件所持有的所的列表的指针&lt;/li&gt;
&lt;li&gt;文件的各种属性,文件大小,时间戳等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文件描述符-打开的句柄和-i-node-之间的关系&#34;&gt;文件描述符,打开的句柄和&lt;code&gt;i-node&lt;/code&gt;之间的关系&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.yuzhan.me/public/img/images/2015/09/fileio_20150919_1.png&#34; alt=&#34;文件描述符,打开的句柄和`i-node`之间的关系&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两个不同的文件描述符,若指向同一打开的文件句柄,将共享同一文件偏移量&lt;/li&gt;
&lt;li&gt;要获得和修改打开的文件标志,可以执行&lt;code&gt;fcntl()&lt;/code&gt;的&lt;code&gt;F_GETFL&lt;/code&gt;和&lt;code&gt;F_SETFL&lt;/code&gt;操作.&lt;/li&gt;
&lt;li&gt;文件描述符标志(&lt;code&gt;close-on-exec&lt;/code&gt;)为进程和文件描述符私有.修改不会影响同一进程或不同进程中其他文件描述符.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-复制文件描述符&#34;&gt;2. 复制文件描述符&lt;/h1&gt;

&lt;h2 id=&#34;相关函数&#34;&gt;相关函数&lt;/h2&gt;

&lt;h3 id=&#34;1-dup&#34;&gt;1. &lt;code&gt;dup()&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;1-1-函数简介&#34;&gt;1.1 函数简介&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dup()&lt;/code&gt;调用复制一个打开的文件描述符&lt;code&gt;oldfd&lt;/code&gt;,并返回一个新描述符,二者都指向同一打开的文件句柄.&lt;br /&gt;
系统会保证新描述符一定是编号值最低的未用文件描述符.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
* @param int oldfd 需要复制的文件描述符
* @return int success 新文件描述符
*             error   -1
*/
int dup(int oldfd);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-dup2&#34;&gt;2. &lt;code&gt;dup2()&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;2-1-函数简介&#34;&gt;2.1 函数简介&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dup2()&lt;/code&gt;系统调用会为&lt;code&gt;oldfd&lt;/code&gt;参数指定新的文件描述符创建副本,其编号有&lt;code&gt;newfd&lt;/code&gt;参数指定&lt;br /&gt;
如果&lt;code&gt;newfd&lt;/code&gt;参数所指定编号的文件描述符之前已经打开,那么&lt;code&gt;dup2()&lt;/code&gt;会将其先关闭&lt;br /&gt;
&lt;code&gt;dup2()&lt;/code&gt;调用会默认忽略&lt;code&gt;newfd&lt;/code&gt;关闭期间出现的任何错误,因此,安全做法为显示调用&lt;code&gt;close()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
* @param int oldfd 需要复制的文件描述符
* @param int newfd 指定的新文件描述符
* @return int success 新文件描述符
*             error   -1
*/
int dup(int oldfd);

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TLPI学习笔记--文件io(三)--原子操作与竞争条件,文件控制</title>
      <link>http://www.yuzhan.me/post/2015-09-18-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E4%B8%89%29--%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AB%9E%E4%BA%89%E6%9D%A1%E4%BB%B6,%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-09-18-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E4%B8%89%29--%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%AB%9E%E4%BA%89%E6%9D%A1%E4%BB%B6,%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6/</guid>
      <description>

&lt;h2 id=&#34;原子操作与竞争条件&#34;&gt;原子操作与竞争条件&lt;/h2&gt;

&lt;h3 id=&#34;1-原子操作&#34;&gt;1. 原子操作&lt;/h3&gt;

&lt;p&gt;所有系统调用都是以原子操作方式执行的&lt;br /&gt;
内核保证了某系统调用中的所有步骤会作为独立操作而一次性加以执行,其间不会为其他进程或线程中断&lt;/p&gt;

&lt;h3 id=&#34;2-竞争状态&#34;&gt;2. 竞争状态&lt;/h3&gt;

&lt;p&gt;操作共享资源的两个进程(或线程),其结果取决于一个无法预期的顺序,即这些进程获得CPU使用权的先后顺序&lt;/p&gt;

&lt;h3 id=&#34;3-原子操作的必要性&#34;&gt;3. 原子操作的必要性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;以独占方式创建一个文件&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;O_EXCL&lt;/code&gt;与&lt;code&gt;O_CREAT&lt;/code&gt;作为&lt;code&gt;open()&lt;/code&gt;的标志位.如果要打开的文件已然存在,则&lt;code&gt;open()&lt;/code&gt;将返回一个错误&lt;br /&gt;
这提供一种机制,保证进程是打开文件的创建者.对文件是否存在和创建文件属于同一原子操作.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;向文件尾部追加数据&lt;/strong&gt;&lt;br /&gt;
多个进程同时向一个文件尾部添加数据,可能再次遇见竞争状态,因为执行的结果依赖于内核对两个进程的调度顺序&lt;br /&gt;
要规避这一问题,需要将文件偏移量和数据写操作纳入同一原子操作.
在打开文件时,&lt;code&gt;O_APPEND&lt;/code&gt;标志就可以保证这一点&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文件控制操作&#34;&gt;文件控制操作&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;fcntl()&lt;/code&gt;系统调用对一个打开的文件描述副执行一系列控制操作&lt;/p&gt;

&lt;h3 id=&#34;1-函数简介&#34;&gt;1. 函数简介&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;fcntl.h&amp;gt;

/**
*   @param int      fd       需要操作的文件描述符
*   @param int      cmd      参数,支持各类操作
*   @param          ...      内核依据cmd参数的值来确定该参数的数据类型
*   @return int     success  依赖与cmd参数
*                   error    -1
*/

int fcntl(int fd, int cmd, ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-fcntl-参数&#34;&gt;2. &lt;code&gt;fcntl&lt;/code&gt;参数&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;F_GETFL&lt;/td&gt;
&lt;td&gt;获得文件访问模式或状态标志&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F_SETFL&lt;/td&gt;
&lt;td&gt;修改文件访问模式或状态标志&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F_DUPFD&lt;/td&gt;
&lt;td&gt;复制文件描述符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-函数应用&#34;&gt;3. 函数应用&lt;/h3&gt;

&lt;h4 id=&#34;3-1-针对一个打开的文件-获取或修改访问模式或状态标志&#34;&gt;3.1 针对一个打开的文件,获取或修改访问模式或状态标志&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    int flags, accessMode;
//  F_GETFL获取访问模式或状态标志
    flags = fcntl(fd, F_GETFL);
    if (flags == -1)
        errExit(&amp;quot;fcntl&amp;quot;);
//  F_SETFL修改访问模式或状态标志
    flags |= O_APPEND;
    if(fcntl(fd, F_SETFL, flags) == -1)
        errExit(&amp;quot;fcntl&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;flags&lt;/code&gt; 为文件的访问模式或状态标志&lt;/p&gt;

&lt;h5 id=&#34;3-1-1-参数-f-setfl-f-getfl&#34;&gt;3.1.1 参数 &lt;code&gt;F_SETFL&lt;/code&gt;, &lt;code&gt;F_GETFL&lt;/code&gt;&lt;/h5&gt;

&lt;h5 id=&#34;3-1-2-用途&#34;&gt;3.1.2 用途:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查文件是否同步&lt;br /&gt;
&lt;code&gt;flags &amp;amp; O_SYNC&lt;/code&gt;&lt;br /&gt;
返回：&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;检查文件访问模式&lt;br /&gt;
&lt;code&gt;flags &amp;amp; O_ACCMODE&lt;/code&gt;&lt;br /&gt;
返回: &lt;code&gt;O_WRONLY&lt;/code&gt;,&lt;code&gt;O_RDWD&lt;/code&gt;,&lt;code&gt;O_RDONLY&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-2-复制文件描述符&#34;&gt;3.2 复制文件描述符&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;newfd = fcntl(oldfd, F_DUPFD, startfd);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-1-参数-f-dupfd&#34;&gt;3.1 参数 &lt;code&gt;F_DUPFD&lt;/code&gt;&lt;/h5&gt;

&lt;h5 id=&#34;3-2-说明&#34;&gt;3.2 说明&lt;/h5&gt;

&lt;p&gt;该调用为&lt;code&gt;oldfd&lt;/code&gt;创建一个副本，且将使用大于等于&lt;code&gt;startfd&lt;/code&gt;的最小未用值作为描述符编号。&lt;br /&gt;
该调用还能保证新描述符&lt;code&gt;startfd&lt;/code&gt;编号落在待定的区间范围。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TLPI学习笔记--文件io(二)--文件偏移量</title>
      <link>http://www.yuzhan.me/post/2015-09-17-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E4%BA%8C%29--%E6%96%87%E4%BB%B6%E5%81%8F%E7%A7%BB%E9%87%8F/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-09-17-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E4%BA%8C%29--%E6%96%87%E4%BB%B6%E5%81%8F%E7%A7%BB%E9%87%8F/</guid>
      <description>

&lt;h2 id=&#34;1-文件偏移量&#34;&gt;1. 文件偏移量&lt;/h2&gt;

&lt;p&gt;文件偏移量是指执行下一个&lt;code&gt;read()&lt;/code&gt;或&lt;code&gt;write()&lt;/code&gt;操作的文件起始位置，会相对于文件头部起始点的文件当前位置来表示。文件第一个字节的偏移量为0。&lt;/p&gt;

&lt;h3 id=&#34;1-1-函数说明&#34;&gt;1.1 函数说明&lt;/h3&gt;

&lt;p&gt;针对文件描述fd已打开的文件，&lt;code&gt;lseek()&lt;/code&gt;系统调用依照&lt;code&gt;offset&lt;/code&gt;和&lt;code&gt;wherece&lt;/code&gt;参数值调整该文件偏移量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

/**
*   @param int          fd       需要调整偏移量的文件描述符
*   @param off_t        offset   指定偏移多少字节
*   @param int          wherece  指定按照哪个基点来解释offset参数：SEEK_SET, SEEK_CUR, SEEK_END
*   @return off_t     success  新文件偏移量
*                     error    -1
*/

off_t lseek(int fd, off_t offset, int wherece);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-参数说明&#34;&gt;1.2 参数说明&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_SET&lt;/td&gt;
&lt;td&gt;偏移量设置为从文件头部起始位置开始的offset个字节&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SEEK_CUR&lt;/td&gt;
&lt;td&gt;当前偏移量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SEEK_END&lt;/td&gt;
&lt;td&gt;偏移亮设置为起始于尾部的offset个字节&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;程序示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lseek(fd, 0, SEEK_SET);     /* 文件开始 */
lseek(fd, 0, SEEK_END);     /* 文件结束 */
lseek(fd, -1, SEEK_END);    /* 文件最后一个字节 */
lseek(fd, -10, SEEK_CUR);   /* 按照当前偏移量，向前偏移10个字节 */
lseek(fd, 10000, SEEK_END); /* 文件最后的10001个字节 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-文件空洞&#34;&gt;1.3 文件空洞&lt;/h3&gt;

&lt;p&gt;从文件结尾到写入新数据间的这段空间称为文件空洞。文件空洞中存在字节，读取空洞将返回以0（空字节）填充的缓冲区&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TLPI学习笔记--文件io(一)--基本操作</title>
      <link>http://www.yuzhan.me/post/2015-09-16-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E4%B8%80%29--%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-09-16-TLPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E6%96%87%E4%BB%B6io%28%E4%B8%80%29--%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>

&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;

&lt;p&gt;所有执行IO操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。&lt;/p&gt;

&lt;h3 id=&#34;文件描述符&#34;&gt;文件描述符&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件描述符&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;POSIX名称&lt;/th&gt;
&lt;th&gt;stdio流&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;标准输入&lt;/td&gt;
&lt;td&gt;STDIN_FILENO&lt;/td&gt;
&lt;td&gt;stdin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;标准输出&lt;/td&gt;
&lt;td&gt;STDOUT_FILENO&lt;/td&gt;
&lt;td&gt;stdout&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;标准错误&lt;/td&gt;
&lt;td&gt;STDERR_FILENO&lt;/td&gt;
&lt;td&gt;stderr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;基本操作&#34;&gt;基本操作&lt;/h1&gt;

&lt;h2 id=&#34;1-打开一个文件-open&#34;&gt;1. 打开一个文件&lt;code&gt;open()&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-1-函数简介&#34;&gt;1.1 函数简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;open()&lt;/code&gt;调用既能打开存在的文件，也能创建并打开一个新文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

/**
*   @param const char * pathname 打开的文件名称，如果是一个符号链接，会对其进行解引用
*   @param int          flags    位掩码，用于指定文件访问模式
*   @param mode_t       mode     位掩码，用于指定新建文件的访问权限
*   @return int     success  文件描述符
*                   error    -1
*/

int open(const char * pathname, int flags, ... /* mode_t mode */);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-文件访问模式&#34;&gt;1.2 文件访问模式&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;访问模式&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O_RDONLY&lt;/td&gt;
&lt;td&gt;以只读方式打开文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_WRONLY&lt;/td&gt;
&lt;td&gt;以只写方式打开文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_RDWR&lt;/td&gt;
&lt;td&gt;以读写方式打开文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1-3-open-调用中的-flags-参数&#34;&gt;1.3 &lt;code&gt;open()&lt;/code&gt;调用中的&lt;code&gt;flags&lt;/code&gt;参数&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标志&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O_RDONLY&lt;/td&gt;
&lt;td&gt;以只读方式打开文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_WRONLY&lt;/td&gt;
&lt;td&gt;以只写方式打开文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_RDWR&lt;/td&gt;
&lt;td&gt;以读写方式打开文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_CREAT&lt;/td&gt;
&lt;td&gt;若文件不存在则创建之&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_EXCL&lt;/td&gt;
&lt;td&gt;结合O_CREAT参数使用，专门用于创建文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_TRUNC&lt;/td&gt;
&lt;td&gt;截断已有文件，使其长度为0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_APPEND&lt;/td&gt;
&lt;td&gt;总在文件尾部追加数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_ASYNC&lt;/td&gt;
&lt;td&gt;当IO操作可行时，产生信号（signal）通知进程&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_DSYNC&lt;/td&gt;
&lt;td&gt;提供同步的IO数据完整性&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_NONBLOCK&lt;/td&gt;
&lt;td&gt;以非阻塞方式打开&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O_SYNC&lt;/td&gt;
&lt;td&gt;以同步方式写入文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1-4-open-函数的错误信息&#34;&gt;1.4 &lt;code&gt;open()&lt;/code&gt;函数的错误信息&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;EACCESS&lt;/code&gt;
无法访问文件，目录权限限制，文件不存在且无法创建该文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EISDIR&lt;/code&gt;
所指定文件属于目录，调用者试图打开文件进行读写&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EMFILE&lt;/code&gt;
进程已打开的文件描述符数量达到了进程资源限制所设定的上限&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENFILE&lt;/code&gt;
文件打开的数量已经达到系统允许的上线&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENOENT&lt;/code&gt;
要么文件不存在且未指定&lt;code&gt;O_CREAT&lt;/code&gt;,要么指定了&lt;code&gt;O_CREAT&lt;/code&gt;,但&lt;code&gt;pathname&lt;/code&gt;参数所指定路径的目录之一不存在，或&lt;code&gt;pathname&lt;/code&gt;参数为空链接&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EROFS&lt;/code&gt;
所指定的文件属于只读文件系统，而调用者企图以写的方式打开文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ETXTBSY&lt;/code&gt;
所指定的文件为可执行文件，且正在运行。系统不允许修改正在运行的程序&lt;/p&gt;

&lt;h2 id=&#34;2-creat-系统调用&#34;&gt;2. &lt;code&gt;creat()&lt;/code&gt;系统调用&lt;/h2&gt;

&lt;h3 id=&#34;2-1-函数简介&#34;&gt;2.1 函数简介&lt;/h3&gt;

&lt;p&gt;早期UNIX实现中，&lt;code&gt;open()&lt;/code&gt;只有两个参数，无法创建新文件，而使用&lt;code&gt;creat()&lt;/code&gt;系统调用来创建并打开一个新文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;fcntl.h&amp;gt;

/**
*   @param const char * pathname 创建并打开一个文件，若文件已存在，则打开文件，并清空文件内容，将长度清0
*   @param mode_t       mode     位掩码，用于指定新建文件的访问权限
*   @return int     success  文件描述符
*                   error    -1
*/

int creat(const char * pathname, mode_t mode);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-读取文件内容-read&#34;&gt;3. 读取文件内容：&lt;code&gt;read()&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;3-1-函数简介&#34;&gt;3.1 函数简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;read()&lt;/code&gt;系统调用从文件描述符&lt;code&gt;fd&lt;/code&gt;所指代的打开的文件中读取数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

/**
*   @param  int             fd       打开的文件的文件描述符
*   @param  void *          buffer   用来存放输入数据的内存缓冲地址，缓冲区至少有count个字节
*   @param  size_t          count    指定最多能够读取的字节数
*   @return ssize_t     success  返回实际读取的字节数，如果遇到文件结束（EOF）则返回0
*                       error    -1
*/

ssize_t read(int fd, void * buffer, size_t count);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-2-注意事项&#34;&gt;3.2 注意事项&lt;/h3&gt;

&lt;p&gt;由于表示字符串终止的空字符需要一个字节的内存，么所以缓冲区的大小至少比预读取的最大字符串长读多出1个字节&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;char buffer[MAX_READ + 1];
ssize_t numRead;

numRead = read(STDIN_FILENO, buffer, MAX_READ);
if (numRead == -1)
    errExit(&amp;quot;read&amp;quot;);
    
buffer[numRead] = &#39;\0&#39;;
printf(&amp;quot;The input data was: %s\n&amp;quot;, buffer);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-数据写入文件-write&#34;&gt;4. 数据写入文件:&lt;code&gt;write()&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;4-1-函数简介&#34;&gt;4.1 函数简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;write()&lt;/code&gt;系统调用将数据写入一个已经打开的文件中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

/**
*   @param  int             fd       要写入数据的文件描述符
*   @param  void *          buffer   要写入数据的内存缓冲地址
*   @param  size_t          count    指定从buffer中
*   @return ssize_t     success  返回实际写入的字节数，可能小于count，称为部分写。
*                       error    -1
*/

ssize_t write(int fd, void * buffer, size_t count);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-关闭文件-close&#34;&gt;5. 关闭文件：&lt;code&gt;close()&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;5-1-函数简介&#34;&gt;5.1 函数简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;close()&lt;/code&gt;系统调用关闭一个打开的文件描述符，并将其释放回调用进程。供该进程继续使用。当一个进程终止时，将自动关闭其已打开的所有文件描述符。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

/**
*   @param  int         fd       需要关闭的文件描述符    
*   @return ssize_t     success  0
*                       error    -1
*/

int close(int fd);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>