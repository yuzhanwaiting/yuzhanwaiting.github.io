<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/categories/python/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/categories/python/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>简单的学生管理类</title>
      <link>http://www.yuzhan.me/post/2014-03-18-%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B1%BB/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-03-18-%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B1%BB/</guid>
      <description>&lt;pre&gt;&lt;code&gt;class Student(object):
    FMT = &#39;[ID:%(ID)s] Name:%(name)s,age:%(age)d&#39;

    def __init__(self,name,age,ID):
        self.name = name
        self.age = age
        self.ID = ID
        self.scores = []

#     使用c++风格iostream
    def __lshift__(self,degree):
        self.scores.append(degree)

    def averange(self):
        return averange(self.scores)

    def __str__(self):
        return self.FMT % self.__dict__

def averange(scores):
    if not scores:
        return None
    else:
        return sum(scores) / len(scores)

def consoleGet(prompt,convertor=str):
    while 1:
        try:
            return convertor(raw_input(prompt))
        except:
            pass

def main():
    student = Student(
                      name=consoleGet(&amp;quot;Please enter student&#39;s name: &amp;quot;),
                      age=consoleGet(&amp;quot;Please enter student&#39;s age: &amp;quot;,int),
                      ID=consoleGet(&amp;quot;Please enter student&#39;s ID:&amp;quot;)
                      )

    for i in range(4):
        prompt = &amp;quot;Please enter student&#39;s grade %d score: &amp;quot; % i
        student &amp;amp;lt;&amp;amp;lt; consoleGet(prompt, int)
    print &amp;quot;%s, averange: %d&amp;quot; % (student, student.averange())

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>python中函数参数的一些思考</title>
      <link>http://www.yuzhan.me/post/2014-01-22-python%E4%B8%AD%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-22-python%E4%B8%AD%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;我们知道，对于变长的函数参数，php中可以用数组，js中可以使用对象来进行传参。&lt;br /&gt;
而收集函数参数，php中使用的方法为&lt;strong&gt;func_get_args()&lt;/strong&gt;,在js中则使用&lt;strong&gt;arguments&lt;/strong&gt;属性来获取（此属性类似数组）&lt;/p&gt;

&lt;p&gt;在python中，我们如何获取变长参数呢&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一：使用列表，字典&lt;/strong&gt;&lt;strong&gt;，元组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def demo(x):
    for s in x:
        print(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处注意，元组具有不可变性，所以，在函数内不应该修改元组，否则会报错，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def demo(x):
    x[0] = 1
demo((1,2,3,4))

&amp;quot;&amp;quot;&amp;quot;
上述会输出如下错误信息
Traceback (most recent call last):
....
TypeError: &#39;tuple&#39; object does not support item assignment
&amp;quot;&amp;quot;&amp;quot;


**第二：使用可变参数  
**

``
def demo(*args,**kargs):
    print(args)
    print(kargs)
demo()
&amp;quot;&amp;quot;&amp;quot;
()
{}
&amp;quot;&amp;quot;&amp;quot;

demo(1,2)
&amp;quot;&amp;quot;&amp;quot;
(1,2)
{}
&amp;quot;&amp;quot;&amp;quot;

demo(c=&#39;a&#39;,b=&#39;d&#39;)
&amp;quot;&amp;quot;&amp;quot;
()
{&#39;c&#39;: &#39;a&#39;, &#39;b&#39;: &#39;d&#39;}
&amp;quot;&amp;quot;&amp;quot;

demo(1,2,c=&#39;a&#39;,b=&#39;d&#39;)
&amp;quot;&amp;quot;&amp;quot;
(1, 2)
{&#39;c&#39;: &#39;a&#39;, &#39;b&#39;: &#39;d&#39;}
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，*&lt;strong&gt;args&lt;/strong&gt;将收集所有位置相关的参数，并放到一个元组中，最后将这个元组赋值给&lt;strong&gt;args&lt;/strong&gt;&lt;br /&gt;
而**&lt;strong&gt;kargs&lt;/strong&gt;指针对关键字参数（指a=3这一类型），这些关键字参数会放到一个相应的字典中，然后同样的赋值给&lt;strong&gt;kargs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;与此相对，python中还有解包参数。参考以下程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def demo(a,b,c):
    print(a,b,c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常调用的情况下，我们得传三个参数，例如&lt;strong&gt;demo(1,2,3)&lt;/strong&gt;&lt;br /&gt;
但有了解包参数，我们可以只用传一个元组就可以实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def demo(a,b,c):
    print(a,b,c)

arg = (1,2,3)
demo(arg)
&amp;quot;&amp;quot;&amp;quot;
Traceback (most recent call last):
...
TypeError: demo() takes exactly 3 arguments (1 given)
&amp;quot;&amp;quot;&amp;quot;

demo(*arg)
&amp;quot;&amp;quot;&amp;quot;
(1, 2, 3)
&amp;quot;&amp;quot;&amp;quot;
&amp;lt;/pre&amp;gt;

***arg**可以解包元组，而****arg**则可以解包字典  
参考以下程序

&amp;lt;pre class=&amp;quot;brush: python; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;def demo(a,b,c):
    print(a,b,c)

arg = {&#39;a&#39;:4,&#39;b&#39;:5,&#39;c&#39;:6}
demo(**arg)
#(4, 5, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意收集参数和参数解包形式上很相似，要注意区别。&lt;br /&gt;
收集函数是，在形参中，利用&lt;red&gt;*&lt;/red&gt;,&lt;red&gt;&lt;strong&gt;&lt;/red&gt;来实现&lt;br /&gt;
参数解包，则是在实参中，利用&lt;red&gt;*&lt;/red&gt;,&lt;red&gt;&lt;/strong&gt;&lt;/red&gt;来实现&lt;/p&gt;

&lt;p&gt;有了以上基础，我们来模拟&lt;strong&gt;map()&lt;/strong&gt;的实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def mymap(func,*seqs):
    res = []
    for args in zip(*seqs):
        res.append(func(*args))
    return res



print(mymap(abs,[-2,-1,0,1,2]))
&amp;quot;&amp;quot;&amp;quot;
收集参数构成seqs成员元祖([-2,-1,0,1,2],)
通过*seqs解包传入zip,得到元祖
(-2,),(-1,),(0,),(1,),(2,)
循环遍历之后，通过解包参数为
abs(-2),abs(-1),abs(0),abs(1),abs(2)
&amp;quot;&amp;quot;&amp;quot;

print(mymap(pow,[1,2,3],[2,3,4,5]))
&amp;quot;&amp;quot;&amp;quot;
zip()通过*seqs解包参数得到三个元祖
(1,2),(2,3),(3,4)
遍历循环之后，元祖解包成为pow的两个参数于是
pow(1,2),pow(2,3),pow(3,4)
&amp;quot;&amp;quot;&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lambda表达式的一些特例</title>
      <link>http://www.yuzhan.me/post/2014-01-20-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E4%BE%8B/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-20-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E4%BE%8B/</guid>
      <description>&lt;p&gt;在js中，函数无限极嵌套。python也可以如此。 最近，在学习python中发现一个很有意思的东西 先看一下的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def func1():
    res = []
    for i in range(5):
        res.append(lambda x: i ** x)
    return res

s1 = func1()
print(s1[0](4))
print(s1[2](4))
#输出 256,256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么都会输出256呢，&lt;br /&gt;
别急，我们先看下面的函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def func2():
    res = []
    for i in range(5):
        res.append(lambda x,i=i: i ** x)
    return res
s2 = func2()
print(s2[0](4))
print(s2[2](4))
#输出0,16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;观察两个函数，我们发觉只有lambda表达式中，函数的参数不一样。&lt;br /&gt;
通过查资料，我们了解到。&lt;br /&gt;
&lt;strong&gt;嵌套函数中的变量只有在调用的时候，才会进行查找&lt;/strong&gt;&lt;br /&gt;
于是，我们观察以上的程序,发现循环之后，i变量会保存为最终值（就是4），直到调用&lt;strong&gt;func1()&lt;/strong&gt;。&lt;br /&gt;
而第二个函数，&lt;strong&gt;func2()&lt;/strong&gt;中有默认值i，而默认值则是在函数创建时，就会进行查找，所以，会随表达式一起。&lt;/p&gt;

&lt;p&gt;下面给出js代码，供大家参考&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function func1()
{
    var arr = []
    for (var i=0; i &amp;amp;lt; 5; i++){
        arr.push(function(x){alert(i*x)})
    }
    return arr
}
var x = func1()
x[0](5)
x[1](5)


function func2()
{
    var arr = []
    for(var i = 0; i &amp;amp;lt; 5; i++){
        cache(i)
    }

    //由于js中没有python默认值这种模式，于是改用函数来改变存入数组的函数
    function cache(i)
    {
        arr.push(function(x){
            alert(i * x);
        })
    }
    return arr
}
var x2 = func2()
x2[0](5)
x2[1](5)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>