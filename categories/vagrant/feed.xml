<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/categories/vagrant/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/categories/vagrant/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>vagrant学习笔记(一)</title>
      <link>http://www.yuzhan.me/post/2015-11-13-vagrant%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%28%E4%B8%80%29/</link>
      <pubDate>Fri, 13 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-11-13-vagrant%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%28%E4%B8%80%29/</guid>
      <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Vagrant 是一款用来构建虚拟开发环境的工具，非常适合 php/python/ruby/java 这类语言开发 web 应用，“代码在我机子上运行没有问题”这种说辞将成为历史。&lt;/p&gt;

&lt;p&gt;我们可以通过 Vagrant 封装一个 Linux 的开发环境，分发给团队成员。成员可以在自己喜欢的桌面系统（Mac/Windows/Linux）上开发程序，代码却能统一在封装好的环境里运行，非常霸气。&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;1.安装virtualbox,下载地址：&lt;a href=&#34;http://download.virtualbox.org/virtualbox/5.0.10/VirtualBox-5.0.10-104061-Win.exe&#34; title=&#34;virtualbox&#34;&gt;virtualbox&lt;/a&gt;
2.安装vagrant,下载地址：&lt;a href=&#34;https://releases.hashicorp.com/vagrant/1.7.4/vagrant_1.7.4.msi&#34; title=&#34;vagrant&#34;&gt;vagrant&lt;/a&gt;
根据软件提示一步步做&lt;/p&gt;

&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;//1. //创建目录存放项目
$ mkdir vagrant_test 
$ cd vagrant_test //切换目录

//2.初始化项目
//类似 git init可以初始化一个项目，无论该目录是否为空
//vagrant init创建一个Vagrantfile,用于项目配置
$ vagrant init 

//3.添加box
$ vagrant add box hashicorp/precise32

//4.启动项目(在此之前修改Vagrantfile)
$ vagrant up 

//连接虚拟机
$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;

&lt;h3 id=&#34;1-boxs&#34;&gt;1. &lt;code&gt;Boxs&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;作为构建虚拟机的改进，vagrant使用基本的镜像快速的克隆一个虚拟机。这些基本的镜像就称之为box
基本命令：
* `add` `vagrant box add ADDRESS`
    通过给定的地址添加一个box,地址可以如下
    1. 公共镜像得缩略名 如 `hashicorp/precise32`
    2. 文件路径，或者`http url` 如 `/home/package.box`
    基本命令： `vagrant box add hicuenv /home/package.box`
    3. 命令选项，`--force` 强制添加一个box

* `list` `vagrant box list`
    列出所有盒子
* `remove` `vagrant box remove NAME`
    删除特定的盒子
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-box-相关操作&#34;&gt;2. &lt;code&gt;box&lt;/code&gt;相关操作&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;* `vagrant up` //启动盒子，会采用`Vagrantfile`中得配置
* `vagrant ssh` 登录虚拟机，不需要用户名和密码
* `vagrant halt` 关闭虚拟机
* `vagrant reload` 重新加载虚拟机配置，即`Vagrantfile`
* `vagrant destroy` 销毁当前虚拟机，不会删除box，只会删除对box所有的改动
* `vagrant stauts` 显示当前虚拟机状态
* `vagrant suspend` 暂停当前主机
* `vagrant resume` 恢复当前暂停的主机
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-vagrantfile-说明&#34;&gt;3. &lt;code&gt;Vagrantfile&lt;/code&gt;说明&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;config.vm.box&lt;/code&gt; 基础镜像
项目中该项配置必须匹配，添加盒子的名字，操作如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box add hicuenv /e/package.box
//将 config.vm.box = &#39;base&#39; 替换为 hicuenv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config.vm.network&lt;/code&gt; 网络配置
基本配置&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//将虚拟机的80端口映射到主机的8080端口
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: 8080 
//将虚拟机的6379端口映射到主机的6379端口
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 6379, host: 6379 
相关参数：       
* `forwarded_port` 将虚拟机端口映射到主机，方便访问
* `guest` 虚拟机端口
* `host`  主机端口
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.vm.synced_folder&lt;/code&gt; 同步目录
基本配置
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
//将本地src目录同步到 /srv/website。如果不存在/src/website，则尝试创建
config.vm.synced_folder &amp;quot;src/&amp;quot;, &amp;quot;/srv/website&amp;quot;

相关参数：
* `disabled`： 禁止某些目录同步
    禁止默认的目录同步
    `config.vm.synced_folder &amp;quot;.&amp;quot;, &amp;quot;/vagrant&amp;quot;,disabled:true`
* `owner`,`group`：指定所有者和所属组。默认情况下，文件夹的所有者和所属组均为ssh的用户
    `config.vm.synced_folder &amp;quot;src/&amp;quot;, &amp;quot;/srv/website&amp;quot;, owner: &amp;quot;root&amp;quot;, group: &amp;quot;root&amp;quot;`
* `type`,指定文件类型
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-创建自己的包&#34;&gt;4. 创建自己的包&lt;/h3&gt;

&lt;p&gt;某些时候我们修改了&lt;code&gt;vagrant&lt;/code&gt;环境，需要重新创建给其他组员使用，这时候可以使用如下命令&lt;br /&gt;
&lt;code&gt;vagrant package&lt;/code&gt; 创建新的box。基本操作：&lt;br /&gt;
&lt;code&gt;vagrant package --output hicuenv.box&lt;/code&gt;&lt;br /&gt;
将当前环境打包成镜像&lt;br /&gt;
* &lt;code&gt;--output NAME&lt;/code&gt; 指定打包的名字。如果没有该选项，则默认情况下会直接打包成&lt;code&gt;package.box&lt;/code&gt;。&lt;br /&gt;
* &lt;code&gt;--vagrantfile FILE&lt;/code&gt;将vagrantfile打包至box，下次启动将会随box一起启动&lt;/p&gt;

&lt;h3 id=&#34;5-启动事项&#34;&gt;5. 启动事项&lt;/h3&gt;

&lt;p&gt;有时候环境配置好了之后，我们可能初始化项目会执行一些特定的操作。一般在linux上，我们会写在&lt;code&gt;rc.local&lt;/code&gt;中，但是有些时候，我们可能会有些特定的操作。这时候就需要相关命令：
&lt;code&gt;config.vm.provision&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;处理文件 &lt;code&gt;file&lt;/code&gt;&lt;/strong&gt;:将主机文件复制到虚拟机
    &lt;code&gt;config.vm.provision &amp;quot;file&amp;quot;, source: &amp;quot;~/.gitconfig&amp;quot;, destination: &amp;quot;.gitconfig&amp;quot;&lt;/code&gt;
    * &lt;code&gt;source&lt;/code&gt; 待上传的文件
    * &lt;code&gt;destination&lt;/code&gt; 虚拟机文件路径&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;处理脚本 &lt;code&gt;shell&lt;/code&gt;&lt;/strong&gt;: 执行脚本任务&lt;br /&gt;
    &lt;code&gt;config.vm.provision &amp;quot;shell&amp;quot;, inline: &amp;quot;echo Hello, World&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;，使用内联&lt;code&gt;shell&lt;/code&gt;,通常为&lt;code&gt;shell&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;, 按路径加在脚本
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;//加载主机当前目录脚本
 config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;script.sh&amp;quot;

//加载其他主机脚本
 config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;https://example.com/provisioner.sh&amp;quot;

//加载虚拟机内部脚本
  config.vm.provision &amp;quot;shell&amp;quot;,inline: &amp;quot;/bin/sh /path/to/the/script/already/on/the/guest.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;脚本参数
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  config.vm.provision &amp;quot;shell&amp;quot; do |s|
    s.inline = &amp;quot;echo $1&amp;quot;
    s.args   = &amp;quot;&#39;hello, world!&#39;&amp;quot;
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;附录：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参数说明:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$# 传给脚本的参数个数
$0 脚本本身的名字
$1 传递给该shell脚本的第一个参数
$2 传递给该shell脚本的第二个参数
$@ 传给脚本的所有参数的列表
$* 以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个
$$ 脚本运行的当前进程ID号
$? 显示最后命令的退出状态，0表示没有错误，其他表示有错误
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某些时候windows下cygwin会报错，原因是因为windows环境支持不是很好，需要另行指定：
&lt;code&gt;export VAGRANT_DETECTED_OS=cygwin&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;公共镜像站地址:&lt;a href=&#34;http://www.vagrantbox.es/&#34;&gt;链接地址&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>