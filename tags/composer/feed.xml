<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/tags/composer/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/tags/composer/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>composer使用教程</title>
      <link>http://www.yuzhan.me/post/2015-08-13-composer%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-08-13-composer%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>

&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;

&lt;p&gt;对于现代语言而言，包管理器基本上是标配。Java有Maven，Python有pip，Ruby有gem，Nodejs有npm。PHP的则是&lt;a href=&#34;http://pear.php.net/&#34;&gt;PEAR&lt;/a&gt;，不过PEAR坑不少
。
现在，我们有了&lt;a href=&#34;http://getcomposer.org/&#34;&gt;composer&lt;/a&gt;,PHP依赖管理的利器&lt;/p&gt;

&lt;h1 id=&#34;安装composer&#34;&gt;安装Composer&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ curl -sS https://getcomposer.org/installer | php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Windows下直接下载安装文件&lt;a href=&#34;https://getcomposer.org/Composer-Setup.exe&#34;&gt;Composer-Setup.exe&lt;/a&gt;安装&lt;/p&gt;

&lt;h1 id=&#34;声明依赖&#34;&gt;声明依赖&lt;/h1&gt;

&lt;p&gt;在项目目录下创建一个&lt;code&gt;composer.json&lt;/code&gt;文件，指明依赖，比如，你的项目依赖 &lt;a href=&#34;https://github.com/Seldaek/monolog&#34;&gt;monolog&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot;: {
    &amp;quot;monolog/monolog&amp;quot;: &amp;quot;1.2.*&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;安装依赖&#34;&gt;安装依赖&lt;/h1&gt;

&lt;p&gt;安装依赖非常简单，只需在项目目录下运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;comoposer installer
//如果没有全局安装的话，则运行：
php composer.phar install
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;自动加载&#34;&gt;自动加载&lt;/h1&gt;

&lt;p&gt;Composer提供了自动加载的特性，只需在你的代码的初始化部分中加入下面一行：&lt;br /&gt;
&lt;code&gt;require  &#39;vendor/autoload.php&#39;;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;简要文档&#34;&gt;简要文档&lt;/h1&gt;

&lt;h3 id=&#34;关于-require-key&#34;&gt;关于&lt;code&gt;require&lt;/code&gt;KEY&lt;/h3&gt;

&lt;p&gt;第一件事情（并且往往只需要做这一件事），你需要在 &lt;code&gt;composer.json&lt;/code&gt; 文件中指定 &lt;code&gt;require&lt;/code&gt; key 的值。你只需要简单的告诉 Composer 你的项目需要依赖哪些包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;1.0.*&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以看到， &lt;code&gt;require&lt;/code&gt; 需要一个 &lt;strong&gt;包名称&lt;/strong&gt; （例如 &lt;code&gt;monolog/monolog&lt;/code&gt;） 映射到 &lt;strong&gt;包版本&lt;/strong&gt; （例如 &lt;code&gt;1.0.*&lt;/code&gt;） 的对象。&lt;/p&gt;

&lt;h3 id=&#34;包名称&#34;&gt;包名称&lt;/h3&gt;

&lt;p&gt;包名称由供应商名称和其项目名称构成。如&lt;code&gt;monolog/monolog&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;包版本&#34;&gt;包版本&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.yuzhan.me/public/img/images/2015/08/composer_01.png&#34; alt=&#34;包版本&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;下一个重要版本-波浪号运算符&#34;&gt;下一个重要版本（波浪号运算符）&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;~&lt;/code&gt; 最好用例子来解释： &lt;code&gt;~1.2&lt;/code&gt; 相当于 &lt;code&gt;&amp;gt;=1.2,&amp;lt;2.0&lt;/code&gt;，而 &lt;code&gt;~1.2.3&lt;/code&gt; 相当于 &lt;code&gt;&amp;gt;=1.2.3,&amp;lt;1.3&lt;/code&gt;。正如你所看到的这对于遵循 &lt;a href=&#34;http://semver.org/lang/zh-CN/&#34;&gt;语义化版本号&lt;/a&gt; 的项目最有用。&lt;/p&gt;

&lt;h3 id=&#34;稳定性&#34;&gt;稳定性&lt;/h3&gt;

&lt;p&gt;默认情况下只有稳定的发行版才会被考虑在内。如果你也想获得 RC、beta、alpha 或 dev 版本，你可以使用 &lt;a href=&#34;http://docs.phpcomposer.com/04-schema.html#Package-links&#34;&gt;稳定标志&lt;/a&gt;。你可以对所有的包做 &lt;a href=&#34;http://docs.phpcomposer.com/04-schema.html#minimum-stability&#34;&gt;最小稳定性&lt;/a&gt; 设置，而不是每个依赖逐一设置。&lt;/p&gt;

&lt;h3 id=&#34;安装依赖包&#34;&gt;安装依赖包&lt;/h3&gt;

&lt;p&gt;获取定义的依赖到你的本地项目，只需要调用 &lt;code&gt;composer.phar&lt;/code&gt; 运行 &lt;code&gt;install&lt;/code&gt; 命令。&lt;br /&gt;
&lt;code&gt;php composer.phar install&lt;/code&gt;&lt;br /&gt;
接着前面的例子，这将会找到 &lt;code&gt;monolog/monolog&lt;/code&gt; 的最新版本，并将它下载到 &lt;code&gt;vendor&lt;/code&gt; 目录。 这是一个惯例把第三方的代码到一个指定的目录 &lt;code&gt;vendor&lt;/code&gt;。如果是 monolog 将会创建 &lt;code&gt;vendor/monolog/monolog&lt;/code&gt; 目录。
另一件事是 &lt;code&gt;install&lt;/code&gt; 命令将创建一个 &lt;code&gt;composer.lock&lt;/code&gt; 文件到你项目的根目录中。&lt;/p&gt;

&lt;h3 id=&#34;composer-lock-锁文件&#34;&gt;&lt;code&gt;composer.lock&lt;/code&gt; - 锁文件&lt;/h3&gt;

&lt;p&gt;在安装依赖后，Composer 将把安装时确切的版本号列表写入 &lt;code&gt;composer.lock&lt;/code&gt; 文件。这将锁定改项目的特定版本。&lt;br /&gt;
如果你的依赖更新了新的版本，你将不会获得任何更新。此时要更新你的依赖版本请使用 &lt;code&gt;update&lt;/code&gt; 命令。这将获取最新匹配的版本（根据你的 &lt;code&gt;composer.json&lt;/code&gt; 文件）并将新版本更新进锁文件。&lt;br /&gt;
&lt;code&gt;php composer.phar update&lt;/code&gt;&lt;br /&gt;
如果只想安装或更新一个依赖，你可以白名单它们：&lt;br /&gt;
&lt;code&gt;php composer.phar update monolog/monolog [...]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;packagist&#34;&gt;Packagist&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/&#34;&gt;packagist&lt;/a&gt; 是 Composer 的主要资源库。 一个 Composer 的库基本上是一个包的源：记录了可以得到包的地方。Packagist 的目标是成为大家使用库资源的中央存储平台。这意味着你可以 &lt;code&gt;require&lt;/code&gt; 那里的任何包。&lt;/p&gt;

&lt;h3 id=&#34;自动加载-1&#34;&gt;自动加载&lt;/h3&gt;

&lt;p&gt;对于库的自动加载信息，Composer 生成了一个 &lt;code&gt;vendor/autoload.php&lt;/code&gt; 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。&lt;br /&gt;
&lt;code&gt;require &#39;vendor/autoload.php&#39;;&lt;/code&gt;&lt;br /&gt;
这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可以像这样开始使用这个类库，并且他们将被自动加载。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$log = new Monolog\Logger(&#39;name&#39;);
$log-&amp;gt;pushHandler(new Monolog\Handler\StreamHandler(&#39;app.log&#39;, Monolog\Logger::WARNING));

$log-&amp;gt;addWarning(&#39;Foo&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;详细文档&#34;&gt;详细文档&lt;/h3&gt;

&lt;p&gt;更多详细文档,&lt;a href=&#34;http://docs.phpcomposer.com/&#34;&gt;请查看&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;常用第三方库&#34;&gt;常用第三方库&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;日志管理：&lt;code&gt;monolog/monolog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时间管理：&lt;code&gt;nesbot/carbon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ORM: &lt;code&gt;doctrine/orm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;图片处理：&lt;code&gt;intervention/image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HTTP处理: &lt;code&gt;guzzle/guzzle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;缓存处理：&lt;code&gt;doctrine/cache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数据库管理：&lt;code&gt;robmorgan/phinx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件处理系统： &lt;code&gt;symfony/filesystem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>