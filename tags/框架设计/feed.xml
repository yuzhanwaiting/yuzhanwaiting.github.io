<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/tags/%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/tags/%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>依赖注入和控制反转</title>
      <link>http://www.yuzhan.me/post/2015-08-14-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2015-08-14-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid>
      <description>

&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;

&lt;h3 id=&#34;依赖注入-dependency-injection-di&#34;&gt;依赖注入(&lt;code&gt;Dependency Injection,DI&lt;/code&gt;)&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;高层类应该依赖底层基础设施来提供必要的服务&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;控制反转-inversion-ofcontrol-ioc&#34;&gt;控制反转(&lt;code&gt;Inversion ofControl,IoC&lt;/code&gt;)&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;控制反转即IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;

&lt;h3 id=&#34;依赖注入&#34;&gt;依赖注入&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先假设一个类&lt;code&gt;Foo&lt;/code&gt;中一个属性，依赖一个对象的实例&lt;code&gt;Bar&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Foo
{
   private $_bar;
   public function __construct() {
     $this-&amp;gt;_bar = new Bar();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过&lt;code&gt;new Bar()&lt;/code&gt;,将对象的实例赋值给成员属性&lt;code&gt;$bar&lt;/code&gt;解决了问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然而，当我们的需求变的复杂，对于不同的参数，或者当&lt;code&gt;Bar&lt;/code&gt;类有多种驱动实现如何处理。结合工厂模式，我们很快想到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Foo
{
   private $_bar;
   public function __construct($driver,$params) {
     $this-&amp;gt;_bar = BarFactory::getInstance($driver,$params);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;工厂函数&lt;code&gt;BarFactory::getInstacne()&lt;/code&gt;,包含两个参数，&lt;code&gt;$driver&lt;/code&gt;和&lt;code&gt;$params&lt;/code&gt;。&lt;code&gt;$driver&lt;/code&gt;表示&lt;code&gt;Bar&lt;/code&gt;所使用的驱动，而&lt;code&gt;$params&lt;/code&gt;则表示参数。借此，我们可以满足需求的变动。之后新增新的驱动，也能很好的添加&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;事情貌似很完美了。可是，我们仔细想想会发现，如果注入类的类多了，或者，&lt;code&gt;BarFactory&lt;/code&gt;变动了。我们就得相应的修改&lt;code&gt;Foo&lt;/code&gt;的&lt;code&gt;__construct&lt;/code&gt;。那么我们怎么解决这类问题呢。此时，我们引入依赖注入(&lt;code&gt;Dependency Injection&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Foo
{
   private $_bar;
   public function __construct($bar) {
     $this-&amp;gt;_bar = $bar;
   }
}
$bar = BarFactory::getInstance($driver,$params);
$foo = new Foo($bar);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样一来，Foo类与Bar类解除耦合了。Foo类中已经完全没有工厂方法或者Bar类的身影。我们通过外部实例化&lt;code&gt;Bar&lt;/code&gt;类，然后传入&lt;code&gt;Foo&lt;/code&gt;构建新的&lt;code&gt;Foo&lt;/code&gt;实例。
这就叫&lt;strong&gt;依赖注入&lt;/strong&gt;，实现不是在代码内部创建依赖关系，而是让其作为一个参数传递，这使得我们的程序更容易维护，降低程序代码的耦合度，实现一种松耦合。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;控制反转&#34;&gt;控制反转&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接上面的类，我们解决了耦合的问题。但是随着一个类越来越复杂，依赖的类变多，如何解决这个问题呢。&lt;br /&gt;
我们可以传入多个类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Foo
{
   private $_bar;
   private $_pin;
       
   public function __construct($bar,$pin) {
     $this-&amp;gt;_bar = $bar;
     $this-&amp;gt;_pin = $pin;
   }
}
$bar = BarFactory::getInstance($driver,$params);
$pin = PinFactory::getInstance($pin);
$foo = new Foo($bar,$pin);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果有更多的类的一来，那么&lt;code&gt;construct&lt;/code&gt;的参数列表将会很长。我们维护将变得十分困难。那么我们如何处理这个问题呢。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我们想，如果有个容器能够专门管理这些类，需要调用的时候取出来就行了。这里我们提出一个概念&lt;strong&gt;容器&lt;/strong&gt;，又叫做&lt;strong&gt;IoC容器&lt;/strong&gt;、&lt;strong&gt;DI容器&lt;/strong&gt;。
先看看如下代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Foo
{
   private $_di;
   public function __construct(Di $di) {
     $this-&amp;gt;_di = $di;
   }
       
   public function userBar(){
     $this-&amp;gt;_di-&amp;gt;get(&#39;bar&#39;)-&amp;gt;doSomething();
   }
       
   public function userPin(){
     $this-&amp;gt;_di-&amp;gt;get(&#39;pin&#39;)-&amp;gt;doSomething();
   }
}
$di = new Di();
    
$di-&amp;gt;set(&#39;bar&#39;,BarFactory::getInstance($driver,$params));
$di-&amp;gt;set(&#39;pin&#39;,PinFactory::getInstance($pin));
    
$foo = new Foo($di);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，我们通过&lt;code&gt;$di&lt;/code&gt;将可能会遇到各类实例注入到容器中。通过&lt;code&gt;$di-&amp;gt;set&lt;/code&gt;方法将需要的实例注册到容器。之后我们只用在需要的位置调用&lt;code&gt;$di-&amp;gt;get&lt;/code&gt;就能得到各类实例了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;问题来了，网站的项目十分庞大，将这么多类注入到容器中，消耗过多内存怎么办。经过思考，我们可以把重要的类的实例放入容器。对于部分只在调用时才需要的容器，可以借助PHP的回调函数解决。代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$di = new Di();
    
$di-&amp;gt;set(&#39;bar&#39;,function(){
  return new Bar();
});
$di-&amp;gt;set(&#39;pin&#39;,function(){
  return new Pin();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一切似乎很完美。等等，如果很多重要的类放入容器，依然会消耗一部分内存。此时，我们可以直接传入类名，然后等到使用的时候实例化。代码实现如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$di = new Di();
$di-&amp;gt;set(&#39;bar&#39;,&#39;\Application\Lib\Bar&#39;);
$di-&amp;gt;set(&#39;pin&#39;,&#39;\Application\Lib\Pin&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果类的命名空间很长，那么可以设置一些别名，来简化导入。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//假设存在一个别名处理类DiAlias，已经注入到容器di中。
//并且，这个别名处理存在一个方法setAlias，将别名与类做映射
$di-&amp;gt;get(&#39;DiAlias&#39;)-&amp;gt;setAlias(&#39;\Application\Lib\Bar&#39;,&#39;Bar&#39;);
//如果有多个别名，我们可以定义一些另外的方法。
$alias = [
    &amp;quot;Bar&amp;quot; =&amp;gt; &amp;quot;\Application\Lib\Bar&amp;quot;,
    &amp;quot;Pin&amp;quot; =&amp;gt; &amp;quot;\Application\Lib\Pin&amp;quot;,
];
//此时可以读取这个配置
$di-&amp;gt;get(&#39;DiAlias&#39;)-&amp;gt;setAllAlias($alias);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;说了这么多&lt;code&gt;di&lt;/code&gt;容器，那么到底&lt;code&gt;di&lt;/code&gt;容器的&lt;code&gt;set&lt;/code&gt;和&lt;code&gt;get&lt;/code&gt;是怎样实现的呢。下面给出简单的实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Di
{
   private $_ins;
       
   public function set($name,$instance)
    {
       //设置实例
       $this-&amp;gt;_ins[$name] = $instance;
    }
        
    public function get($name)
    {
       //判断实例是否存在
       if (!isset($this-&amp;gt;_ins[$name])) {
           throw new Exception(&amp;quot;instance not found&amp;quot;);
       }
           
       $instance = $this-&amp;gt;_ins[$name];
       //如果为闭包，则直接调用闭包函数
       if ($instance instanceof Closure) {
           return call_user_func($instance);
       } else {
           return new $instance();
       }
    }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接下来，需求更复杂了。如果我们使用的&lt;code&gt;Bar&lt;/code&gt;类依赖另外一个类&lt;code&gt;Page&lt;/code&gt;的实现。上面的方法如何解决。类似如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Bar
{
    public function __construct(Page $page) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过思考，我们想到了PHP的发射。通过反射机制来获取依赖关系&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Di
{
    private $_ins;
    
   public function set($name, $instance)
   {
       //设置实例
       $this-&amp;gt;_ins[$name] = $instance;
   }
       
   public function get($name)
   {
       //判断实例是否存在
       if (!isset($this-&amp;gt;_ins[$name])) {
           throw new Exception(&amp;quot;instance not found&amp;quot;);
       }
    
       $instance = $this-&amp;gt;_ins[$name];
       //如果为闭包，则直接调用闭包函数
       if ($instance instanceof Closure) {
           return call_user_func($instance);
       } else {
           //如果不为闭包，直接建立依赖关系实例化
           $object = $this-&amp;gt;build($instance);
           return $object;
       }
   }
    
    //建立依赖关系
    protected function build($instance)
    {
        //获取依赖关系
        list ($reflection, $dependencies) = $this-&amp;gt;getDependencies($instance);
    
        //如果依赖不为空,根据参数实例化
        if (!empty($dependencies)) {
            return $reflection-&amp;gt;newInstanceArgs($dependencies);
        } else {
            //如果依赖不为空，则直接实例化参数
            $object = $reflection-&amp;gt;newInstanceArgs();
            return $object;
        }
    }
    
    //获取实例的依赖关系，方便实例化类
    protected function getDependencies($instance)
    {
        $dependencies = [];
//        实例化反射类
        $reflection = new ReflectionClass($instance);
    
//        获取初始化函数，用于检测是否包含依赖注入
        $constructor = $reflection-&amp;gt;getConstructor();
    
        if ($constructor !== null) {
//            获取初始化函数类名，判断是否存在依赖关系
            foreach ($constructor-&amp;gt;getParameters() as $param) {
                $c = $param-&amp;gt;getClass();
                $dependencies[] = $c-&amp;gt;getName();
            }
        }
        return array($reflection,$dependencies);
    }
    
    //解决依赖关系
    protected function resolveDependencies($dependencies)
    {
        foreach ($dependencies as $index =&amp;gt; $dependency) {
            $dependencies[$index] = $this-&amp;gt;get($dependency);
        }
        return $dependencies;
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;虽然还有些地方没有完善。例如类的参数如何处理，添加依赖注入的时候，能够添加新的别名。添加依赖注入如何添加参数，单例等等。这些都还没细说。这里只是对依赖注入和&lt;code&gt;IoC&lt;/code&gt;容器做一个大概说明。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;现在的框架，不搞个&lt;code&gt;DI&lt;/code&gt;，仿佛就落伍了。当然，这自然有许多好处，比如类更加容易调用和控制。类与类之间也是松耦合的。全局大部分东西可以拆开重新替换。确实方便了很多。至于缺点，使用反射机制对性能造成一定的影响。代码对于初学者来说，理解难度过大等。总之，任何东西，适合自己的项目才是最好的。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>