<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微端生活</title>
    <link>http://www.yuzhan.me/tags/%E9%80%92%E5%BD%92/feed/index.xml</link>
    <description>Recent content on 微端生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="http://www.yuzhan.me/tags/%E9%80%92%E5%BD%92/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>无限级分类研究：（四）新方法的引子</title>
      <link>http://www.yuzhan.me/post/2014-01-12-%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB%E7%A0%94%E7%A9%B6%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E6%96%B0%E6%96%B9%E6%B3%95%E7%9A%84%E5%BC%95%E5%AD%90/</link>
      <pubDate>Sun, 12 Jan 2014 12:24:34 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-12-%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB%E7%A0%94%E7%A9%B6%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E6%96%B0%E6%96%B9%E6%B3%95%E7%9A%84%E5%BC%95%E5%AD%90/</guid>
      <description>&lt;p&gt;在上一篇文章中，我们已经写出了程序。现在我们探讨一个问题。&lt;/p&gt;

&lt;p&gt;现实中，我们的女友（或女神）可能喜欢逛网店，比如，正好要买一件。我们知道，女孩子买衣服可能会比较纠结，可能首先点击的就是女装，那么，不管是女款羽绒服，还是女款连衣裙都会显示。&lt;/p&gt;

&lt;p&gt;同样，在我们列出的栏目中，我们的用户，可能只是想看看新闻。那么所有的新闻都会被列出来。基于这个需求，我们就得考虑一下我们的程序该怎样写。&lt;/p&gt;

&lt;p&gt;当我们仔细回顾我们的程序时，发觉，我们正好写过此程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 获取栏目下所有后代栏目
 * @param  int $id 栏目id
 * @return array
 */
function get_array($id)
{
    static $level = 1;
    $res = $this-&amp;gt;get_child($id,$level);
    if($level == 1)
        $this-&amp;gt;order_data = $res;
    else
        $this-&amp;gt;order_data = insert_array($res,$id,$this-&amp;gt;order_data);
    if (count($res) &amp;gt; 0)
    {
        $level++;
        foreach($res as $key =&amp;gt; $val)
            $this-&amp;gt;get_array($val[&#39;id&#39;]);
        $level--;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一段代码，我们传一个id，正好能完全遍历出下级来。&lt;/p&gt;

&lt;p&gt;但是，我们脑中对于递归的印象，向来是不好的。项目经理可能会告诉我们，能不用递归，就不要用递归。可是，我们之前输出所有栏目不正好用了递归。&lt;/p&gt;

&lt;p&gt;好吧，细心的你已经发现我的“疏漏”了。针对这个疏漏，我们一般是怎样解决的呢？基于，所有分类，及时性要求不是很高。我们会选择直接缓存。每次增删改的时候更新缓存。这样就能保护网站的高效性，而不用每次都去递归。&lt;/p&gt;

&lt;p&gt;那么，为什么我们不单独缓存二级栏目的后代栏目呢？仔细想想，我们发现，这样的做法不合适。我们的网站体积变大之后，栏目可能会随之增多。如果每个二级栏目缓存，以后三级栏目再缓存。那么缓存文件将会变得很多，&lt;strong&gt;而且，更重要的是，每次增删改，都会十分麻烦&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;既然如此，那我们如何解决这个问题？&lt;br /&gt;
首先，我们观察一下数组，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array (
    6 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;6&#39;,&#39;pid&#39; =&amp;gt; &#39;0&#39;,&#39;name&#39; =&amp;gt; &#39;世界&#39;,&#39;list_order&#39; =&amp;gt; &#39;4&#39;,&#39;level&#39; =&amp;gt; 1,),
    8 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;8&#39;,&#39;pid&#39; =&amp;gt; &#39;6&#39;,&#39;name&#39; =&amp;gt; &#39;欧洲&#39;,&#39;list_order&#39; =&amp;gt; &#39;6&#39;,&#39;level&#39; =&amp;gt; 2,),
    9 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;9&#39;,&#39;pid&#39; =&amp;gt; &#39;8&#39;,&#39;name&#39; =&amp;gt; &#39;俄罗斯&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 3,),
    7 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;7&#39;,&#39;pid&#39; =&amp;gt; &#39;6&#39;,&#39;name&#39; =&amp;gt; &#39;中东&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 2,),
    1 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;1&#39;,&#39;pid&#39; =&amp;gt; &#39;0&#39;,&#39;name&#39; =&amp;gt; &#39;新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 1,),
    3 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;3&#39;,&#39;pid&#39; =&amp;gt; &#39;1&#39;,&#39;name&#39; =&amp;gt; &#39;社会新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;3&#39;,&#39;level&#39; =&amp;gt; 2,),
    10 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;10&#39;,&#39;pid&#39; =&amp;gt; &#39;3&#39;,&#39;name&#39; =&amp;gt; &#39;大楚新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 3,),
    2 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;2&#39;,&#39;pid&#39; =&amp;gt; &#39;1&#39;,&#39;name&#39; =&amp;gt; &#39;体育新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 2,),
    4 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;4&#39;,&#39;pid&#39; =&amp;gt; &#39;2&#39;,&#39;name&#39; =&amp;gt; &#39;NBA&#39;,&#39;list_order&#39; =&amp;gt; &#39;5&#39;,&#39;level&#39; =&amp;gt; 3,),
    5 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;5&#39;,&#39;pid&#39; =&amp;gt; &#39;2&#39;,&#39;name&#39; =&amp;gt; &#39;欧冠&#39;,&#39;list_order&#39; =&amp;gt; &#39;2&#39;,&#39;level&#39; =&amp;gt; 3,),
    11 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;11&#39;,&#39;pid&#39; =&amp;gt; &#39;5&#39;,&#39;name&#39; =&amp;gt; &#39;皇马&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 4,)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们发现，每一个下级栏目的level都会大于上级栏目。&lt;br /&gt;
举例子来说：&lt;br /&gt;
&lt;strong&gt;欧洲&lt;/strong&gt;的&lt;strong&gt;level&lt;/strong&gt;为&lt;strong&gt;2&lt;/strong&gt;，而&lt;strong&gt;世界&lt;/strong&gt;的&lt;strong&gt;level&lt;/strong&gt;为&lt;strong&gt;1&lt;/strong&gt;&lt;br /&gt;
之后的&lt;strong&gt;俄罗斯&lt;/strong&gt;，&lt;strong&gt;中东&lt;/strong&gt;，也是如此。&lt;/p&gt;

&lt;p&gt;直到&lt;strong&gt;新闻&lt;/strong&gt;的&lt;strong&gt;level&lt;/strong&gt;为&lt;strong&gt;1&lt;/strong&gt;等于，世&lt;strong&gt;世界&lt;/strong&gt;的&lt;strong&gt;level&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由此，我们能够结论，一个栏目下的level必定大于该栏目的level，如果一直往后遍历，那么，知道出现level小于或等于它。这之间的所有栏目都是其子栏目。&lt;br /&gt;
这句话有点绕，没看懂也不要紧，我们画个图，让大家明白&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.yuzhan.me/public/img/images/2014/01/无限级后代元素示意图.png&#34; alt=&#34;无限级后代元素示意图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;现在，我们思考一下，程序该怎么写。&lt;/p&gt;

&lt;p&gt;根据示意图，我可以大概的退出。可以从栏目开始的位置循环，直到level小于或等于该栏目的level，则退出循环，正好可以所有数组。&lt;/p&gt;

&lt;p&gt;所以，有了如下程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 获取栏目后代
 * @param  int $id 栏目id
 * @return
 */
function getDescend($id)
{
    $array = array();
    //栏目层级
    $level = $this-&amp;gt;order_data[$id][&#39;level&#39;];

    //此处循环，构造新的数组，使数组从该栏目开始
    foreach($this-&amp;gt;order_data as $key =&amp;gt; $val)
    {
        //由于我们的栏目是经过排序的，所以，只用去除之前不等于该栏目的所有栏目，
        //得到的新栏目则可以用下一步处理
        if ($key != $id)
            unset($this-&amp;gt;order_data[$key]);
        else
            break;
    }

    //处理第一个栏目，也就是剔除我们的栏目，方便循环
    //记住，此处不能用array_shift()，
    //因为，array_shift()会返回由0开始的下标数组，不是我们需要的结构
    //因此，只能用unset
    unset($this-&amp;gt;order_data[$id]);

    foreach($this-&amp;gt;order_data as $key =&amp;gt; $val)
    {
        //此处计算，正好是我们之前的示意图所说明的
        if ($val[&#39;level&#39;] &amp;gt; $level)
            $array[$key] = $val;
        else
            break;
    }
    return $array;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面程序，最终返回&lt;strong&gt;$id&lt;/strong&gt;下的所有后代元素。&lt;br /&gt;
只用两次循环，就完全解决了问题。效率比之前的递归调用，高了不少。&lt;br /&gt;
于是，我们很高兴，很开心。&lt;br /&gt;
但是，我们能不能写出更完美的程序呢？&lt;br /&gt;
答案是有的，下一篇中，我们将会介绍，新的结构，能够完全解决这个问题。&lt;br /&gt;
所以，朋友们，请继续关注吧&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>无限级分类研究：（三）分类输出</title>
      <link>http://www.yuzhan.me/post/2014-01-12-%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB%E7%A0%94%E7%A9%B6%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%88%86%E7%B1%BB%E8%BE%93%E5%87%BA/</link>
      <pubDate>Sun, 12 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-12-%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB%E7%A0%94%E7%A9%B6%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%88%86%E7%B1%BB%E8%BE%93%E5%87%BA/</guid>
      <description>&lt;p&gt;昨天，我们已经得到了数组，接下来就是输出了.我们知道，无限级分类，如果知道层级，是很容易得出很规范的格式。&lt;br /&gt;
之前，我们已经通过get_array已经把层级&lt;strong&gt;level&lt;/strong&gt;得到，由此，不难输出。&lt;/p&gt;

&lt;p&gt;下面，给我完成的程序供大家参考。&lt;br /&gt;
由于本次无限级分类难点主要在输出上。至于添加，没什么太大的难点，填好父id，就可以。(如果大家确实需要，届时再补上)。所以，我只写了输出，增删改都没写。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header(&amp;quot;Content-type:text/html;charset=utf-8&amp;quot;);
class category_1
{
    protected $db,$data=array(),$order_data=array();
    
    function __construct()
    {
        $this-&amp;gt;db = new mysqli(&amp;quot;localhost&amp;quot;,&amp;quot;root&amp;quot;,&amp;quot;root&amp;quot;,&amp;quot;fenlei&amp;quot;);
        $this-&amp;gt;data();

    }

    /**
     * 输出
     */
    function show($id)
    { 
        $this-&amp;gt;get_array($id);
        echo $this-&amp;gt;format();
    }

    /**
     * 格式化数组
     */
    function format()
    {
        // 此时数组已经得到，通过操作level，我们可以获得自定义的样式
        $str = &amp;quot;&amp;quot;;
        $str .= &amp;quot;&amp;amp;lt;select name=&#39;&#39;&amp;gt;&amp;amp;lt;option&amp;gt;请选择&amp;amp;lt;/option&amp;gt;&amp;quot;;
        foreach($this-&amp;gt;order_data as $key =&amp;gt; $val)
        {
            if($val[&#39;level&#39;] == 1)
                $space = &amp;quot;&amp;quot;;
            else
            {
                $space =str_repeat(&amp;quot;│&amp;amp;nbsp;&amp;quot;, ($val[&#39;level&#39;]-1)).&amp;quot;├&amp;quot;;
            }
            $str .= &amp;quot;&amp;amp;lt;option&amp;gt;&amp;quot;.$space.$val[&#39;name&#39;].&amp;quot;&amp;amp;lt;/option&amp;gt;&amp;quot;;
        }
        $str .=&amp;quot;&amp;amp;lt;/select&amp;gt;&amp;quot;;
        return $str;
    }

    /**
     * 获取栏目下所有后代栏目
     * @param  int $id 栏目id
     * @return array 
     */
    function get_array($id)
    {
        static $level = 1;
        $res = $this-&amp;gt;get_child($id,$level);
        if($level == 1)
            $this-&amp;gt;order_data = $res;
        else
            $this-&amp;gt;order_data = insert_array($res,$id,$this-&amp;gt;order_data);
        if (count($res) &amp;gt; 0)
        {
            $level++;
            foreach($res as $key =&amp;gt; $val)
                $this-&amp;gt;get_array($val[&#39;id&#39;]);
            $level--;
        }
    }

    /**
     * 获取对应子栏目
     * @param  int $pid   父id
     * @param  int $level 层级
     * @return array 
     */
    function get_child($pid,$level)
    {
        $res_array = array();
        foreach($this-&amp;gt;data as $key =&amp;gt; $val)
        {
            if ($val[&#39;pid&#39;] == $pid)
            {
                $val[&#39;level&#39;] = $level;
                $res_array[$key] = $val;
            }
        }
        return $res_array;
    }

    /**
     * 获取数组
     * @return void 
     */
    function data()
    {
        $sql = &amp;quot;select * from category_1_copy order by list_order desc&amp;quot;;
        $res = $this-&amp;gt;db-&amp;gt;query($sql);
        while($row = $res-&amp;gt;fetch_assoc())
            $this-&amp;gt;data[$row[&#39;id&#39;]] = $row;
    }
}

//测试
$demo = new category_1();
$data = $demo-&amp;gt;show(0);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你觉得程序过长，网上观看不方便，本站提供一个包下载，&lt;a href=&#34;http://www.yuzhan.me/public/img/images/2014/01/fenlei.zip&#34;&gt;无限级分类程序1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;尽请期待下一篇文章，我们将介绍第二种方式&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>无限级分类研究：（二）具体实现</title>
      <link>http://www.yuzhan.me/post/2014-01-10-%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB%E7%A0%94%E7%A9%B6%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 10 Jan 2014 12:24:34 +0000</pubDate>
      
      <guid>http://www.yuzhan.me/post/2014-01-10-%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB%E7%A0%94%E7%A9%B6%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;之前的文章已经说明，如何获取自己。按照之前的图片逻辑，我们会选取第一级栏目，于是有以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
     * 获取栏目下所有后代栏目
     * @param  int $id 栏目id
     * @return array
     */
    function get_array($id)
    {
        //此处get_child我们已经说过，是去除所有子栏目,其中id为栏目id
        $res = $this-&amp;gt;get_child($id);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印以上数组，我们会得到第一层级，如果要得到第二层级，我们得再循环一次，于是有&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function get_array($id)
    {
        $res = $this-&amp;gt;get_child($id);
        //当数组不为空的时候，即是有后代元素
        if (count($res) &amp;gt; 0)
        {
            foreach($res as $key =&amp;gt; $val)
               $data[$key][&#39;son&#39;] = $this-&amp;gt;get_child($val[&#39;id&#39;]);
        }
    }
//由于结果太长，这这里只打印一组结果
/**
    [6] =&amp;gt; Array
        (
            [son_list] =&amp;gt; Array
                (
                    [8] =&amp;gt; Array
                        (
                            [id] =&amp;gt; 8
                            [pid] =&amp;gt; 6
                            [name] =&amp;gt; 欧洲
                            [list_order] =&amp;gt; 6
                        )

                    [7] =&amp;gt; Array
                        (
                            [id] =&amp;gt; 7
                            [pid] =&amp;gt; 6
                            [name] =&amp;gt; 中东
                            [list_order] =&amp;gt; 0
                        )

                )

        )
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;以上结果虽然输出了自后代，带这种模式肯定不是我们需要的，因为无限极不断完善之后，层级越多，数组嵌套层次越多，到时候读取，会极大的影响性能。&lt;/strong&gt;因此，我们加入level来表示栏目的层级。&lt;/p&gt;

&lt;p&gt;在&lt;a title=&#34;无限级分类研究：（一）初步构想&#34; href=&#34;http://www.yuzhan.me/archives/50.html&#34; target=&#34;_blank&#34;&gt; 无限级分类研究：（一）初步构想&lt;/a&gt; 中，我们已经列出了数组模式，考虑到上面所说的，我们给数组，加上层级。&lt;br /&gt;
第一级为level = 1,依次叠加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array (
    6 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;6&#39;,&#39;pid&#39; =&amp;gt; &#39;0&#39;,&#39;name&#39; =&amp;gt; &#39;世界&#39;,&#39;list_order&#39; =&amp;gt; &#39;4&#39;,&#39;level&#39; =&amp;gt; 1,),
    8 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;8&#39;,&#39;pid&#39; =&amp;gt; &#39;6&#39;,&#39;name&#39; =&amp;gt; &#39;欧洲&#39;,&#39;list_order&#39; =&amp;gt; &#39;6&#39;,&#39;level&#39; =&amp;gt; 2,),
    9 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;9&#39;,&#39;pid&#39; =&amp;gt; &#39;8&#39;,&#39;name&#39; =&amp;gt; &#39;俄罗斯&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 3,),
    7 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;7&#39;,&#39;pid&#39; =&amp;gt; &#39;6&#39;,&#39;name&#39; =&amp;gt; &#39;中东&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 2,),
    1 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;1&#39;,&#39;pid&#39; =&amp;gt; &#39;0&#39;,&#39;name&#39; =&amp;gt; &#39;新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 1,),
    3 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;3&#39;,&#39;pid&#39; =&amp;gt; &#39;1&#39;,&#39;name&#39; =&amp;gt; &#39;社会新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;3&#39;,&#39;level&#39; =&amp;gt; 2,),
    10 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;10&#39;,&#39;pid&#39; =&amp;gt; &#39;3&#39;,&#39;name&#39; =&amp;gt; &#39;大楚新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 3,),
    2 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;2&#39;,&#39;pid&#39; =&amp;gt; &#39;1&#39;,&#39;name&#39; =&amp;gt; &#39;体育新闻&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 2,),
    4 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;4&#39;,&#39;pid&#39; =&amp;gt; &#39;2&#39;,&#39;name&#39; =&amp;gt; &#39;NBA&#39;,&#39;list_order&#39; =&amp;gt; &#39;5&#39;,&#39;level&#39; =&amp;gt; 3,),
    5 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;5&#39;,&#39;pid&#39; =&amp;gt; &#39;2&#39;,&#39;name&#39; =&amp;gt; &#39;欧冠&#39;,&#39;list_order&#39; =&amp;gt; &#39;2&#39;,&#39;level&#39; =&amp;gt; 3,),
    11 =&amp;gt; array (&#39;id&#39; =&amp;gt; &#39;11&#39;,&#39;pid&#39; =&amp;gt; &#39;5&#39;,&#39;name&#39; =&amp;gt; &#39;皇马&#39;,&#39;list_order&#39; =&amp;gt; &#39;0&#39;,&#39;level&#39; =&amp;gt; 4,)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仔细一想，我们改进之前所写的get_child()成员函数，让其支持level&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
     * 获取对应子栏目
     * @param  int $pid   父id
     * @param  int $level 层级
     * @return array
     */
    function get_child($pid,$level)
    {
        $res_array = array();
        foreach($this-&amp;gt;data as $key =&amp;gt; $val)
        {
            if ($val[&#39;pid&#39;] == $pid)
            {
                $val[&#39;level&#39;] = $level;
                $res_array[$key] = $val;
            }
        }
        return $res_array;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个成员函数写好了，我们可以做最后的事情了。但是，慢着，我们还需要增加一个函数，可以网数组中随意插入一段数组。&lt;br /&gt;
等等，这个貌似已经说过了。&lt;br /&gt;
哈哈，大家发现了吗，&lt;a href=&#34;http://www.yuzhan.me/2014/01/09/php-数组中插入元素/&#34;&gt;php 数组中插入元素&lt;/a&gt;这篇文章，我们直接就已经说过了。此处，我们稍加改进，把函数直接拿过来。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 往数组中插入元素
 * @param  mix $value 要插入的值
 * @param  key $key   mix 插入元素的位置
 * @param  array $array 源数组
 * @return array        新数组
 */
function insert_array($value,$key,$array)
{
    //新建数组，用户返回
    $return_array = array();
    foreach($array as $k =&amp;gt; $v)
    {
        //保持原有数组
        $return_array[$k] = $v;
        //当插入位置与值相等，此时，讲元素插入数组
        if ($key == $k)
        {
            //如果为数组，则循环添加
            if(is_array($value))
            {
                foreach($value as $sk =&amp;gt; $sv)
                    $return_array[$sk] = $sv;
            }
            else//非数组，则单一添加
                $return_array[] = $value;
        }
    }
    return $return_array;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有了上面的工具，我们可以构想如下代码了，这里我先贴出来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
     * 获取栏目下所有后代栏目
     * @param  int $id 栏目id
     * @return array
     */
    function get_array($id)
    {
        static $level = 1;
        $res = $this-&amp;gt;get_child($id,$level);
        if($level == 1)
            $this-&amp;gt;order_data = $res;
        else
            $this-&amp;gt;order_data = insert_array($res,$id,$this-&amp;gt;order_data);
        if (count($res) &amp;gt; 0)
        {
            $level++;
            foreach($res as $key =&amp;gt; $val)
                $this-&amp;gt;get_array($val[&#39;id&#39;]);
            $level--;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一下贴这么多代码，大家可能不理解，那我就一步步跟大家说。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static $level = 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;static用于函数内部的变量，表示静态变量，此变量有一个特点，函数初次执行之，会进行初始化，递归中再次调用，不会对其再初始化。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//获取字栏目
 $res = $this-&amp;gt;et_child($id,$level);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if($level == 1)
            $this-&amp;gt;order_data = $res;
        else
            $this-&amp;gt;order_data = insert_array($res,$id,$this-&amp;gt;order_data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面程序似乎很难理解。其实，我们仔细观察，觉得，也没有那么复杂。我们发现，层级为一级时(level = 1),直接将结果赋给排序后的数组。当层级不为一级时，将得到的结果，插入相应的父层级之后。画个流程图让大家明白&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.yuzhan.me/public/img/images/2014/01/无限级分类操作示意图.png&#34; alt=&#34;无限级分类操作示意图&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (count($res) &amp;gt; 0)
        {
            $level++;
            foreach($res as $key =&amp;gt; $val)
                $this-&amp;gt;get_array($val[&#39;id&#39;]);
            $level--;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一段应该是最难理解的（个人认为）.于是我们分几步来分解&lt;br /&gt;
&lt;strong&gt;第一步：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if (count($res) &amp;gt; 0){}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;判断是否含有子栏目，如果没有，则不做任何操作&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$level++;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;由于是操作子栏目，比如，我们的数据中，&lt;strong&gt;世界&lt;/strong&gt;为&lt;strong&gt;level=1&lt;/strong&gt;，&lt;strong&gt;欧洲&lt;/strong&gt;为&lt;strong&gt;level=2&lt;/strong&gt;。我们每往下一级循环的时候，level都会加1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach($res as $key =&amp;gt; $val)
                $this-&amp;gt;get_array($val[&#39;id&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;递归调用，将对应的数组，插入数组中&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$level--;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;回归新的层级&lt;br /&gt;
这两句，看不明白不要紧，同样的，我们画个流程图，给大家看看就明白了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.yuzhan.me/public/img/images/2014/01/无限级分类递归示意图.png&#34; alt=&#34;无限级分类递归示意图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图中，我们需要注意的是，每次&lt;strong&gt;foreach&lt;/strong&gt;都没执行完，直到它没有子栏目，则会一步步往上递归。&lt;/p&gt;

&lt;p&gt;好了，排序已经完成了，接下来就是输出了。敬请关注无限级分类第三篇吧&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>